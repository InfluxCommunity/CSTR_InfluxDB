version: '3.8'

services:
  kafka:
    image: 'apache/kafka:latest'
    ports:
      - '9092:9092'
    # environment:
    #   KAFKA_BROKER_ID: 1
    #   KAFKA_PROCESS_ROLES: broker,controller
    #   KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
    #   KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
    #   KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    #   KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
    #   KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    #   KAFKA_LOG_DIRS: /var/lib/kafka/data
    #   KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    #   KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #   KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    #   KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    #   KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
    #   KAFKA_LOG4J_LOGGERS: "kafka.controller=DEBUG,kafka.network.RequestChannel$=DEBUG"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  combined_service:
    build:
      context: ./model
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '6066:6066'
      - '6067:6067'
    environment:
      KAFKA_BROKER: 'kafka:9092'
    networks:
      - kafka-net

  telegraf:
    image: telegraf:latest
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net

volumes:
  kafka_data:

networks:
  kafka-net:
    driver: bridge
